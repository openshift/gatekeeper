name: build_test_release
on:
  push:
    paths-ignore:
      - "docs/**"
      - "library/**"
      - "demo/**"
      - "deprecated/**"
      - "example/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "library/**"
      - "demo/**"
      - "deprecated/**"
      - "example/**"
      - "**.md"
env:
  GITHUB_REPO: open-policy-agent/gatekeeper
  IMAGE_REPO: openpolicyagent/gatekeeper

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install golangci-lint
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          echo ::add-path::$GITHUB_WORKSPACE/bin
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $GITHUB_WORKSPACE/bin v${GOLANGCILINT_VERSION}
        env:
          GOLANGCILINT_VERSION: 1.30.0

      - name: Make lint
        run: |
          make lint

  test:
    name: "Unit test"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Unit test
        run: |
          arch=amd64
          version=2.3.1
          curl -L -O "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${version}/kubebuilder_${version}_linux_${arch}.tar.gz" &&\
            tar -zxvf kubebuilder_${version}_linux_${arch}.tar.gz &&\
            sudo mv kubebuilder_${version}_linux_${arch} /usr/local/kubebuilder
          version=3.7.0
          curl -L -O "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${version}/kustomize_v${version}_linux_${arch}.tar.gz" &&\
            tar -zxvf kustomize_v${version}_linux_${arch}.tar.gz &&\
            chmod +x kustomize &&\
            sudo mv kustomize /usr/local/bin
          make native-test
      - name: Codecov Upload
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          file: ./cover.out
          fail_ci_if_error: false

  build_test:
    name: "Build and Test"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Bootstrap e2e
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          echo ::add-path::$GITHUB_WORKSPACE/bin
          make e2e-bootstrap

      - name: Run e2e
        run: |
          make e2e-build-load-image IMG=gatekeeper-e2e:latest
          make deploy IMG=gatekeeper-e2e:latest USE_LOCAL_IMG=true
          make test-e2e
          echo -e '\n\n======= manager logs =======\n\n'
          kubectl logs -n gatekeeper-system -l control-plane=controller-manager

  helm_build_test:
    name: "[Helm] Build and Test"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        HELM_VERSION: ["2.16.10", "3.3.0"]
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Bootstrap e2e
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          echo ::add-path::$GITHUB_WORKSPACE/bin
          make e2e-bootstrap

      - name: Run e2e
        run: |
          make e2e-build-load-image IMG=gatekeeper-e2e-helm:latest
          make e2e-helm-deploy HELM_REPO=gatekeeper-e2e-helm HELM_RELEASE=latest HELM_VERSION=${{ matrix.HELM_VERSION }}
          make test-e2e
          echo -e '\n\n======= manager logs =======\n\n'
          kubectl logs -n gatekeeper-system -l control-plane=controller-manager

  pre-release:
    name: "Pre Release"
    runs-on: "ubuntu-latest"
    if: (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release-')) && github.event_name == 'push' && github.repository == 'open-policy-agent/gatekeeper'
    needs: [lint, test, build_test, helm_build_test]
    timeout-minutes: 30
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: make docker-push-dev
        run: |
          tokenUri="https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ env.IMAGE_REPO }}:pull"
          bearerToken="$(curl --silent --get $tokenUri | jq --raw-output '.token')"
          listUri="https://registry-1.docker.io/v2/${{ env.IMAGE_REPO }}/tags/list"
          authz="Authorization: Bearer $bearerToken"
          version_list="$(curl --silent --get -H "Accept: application/json" -H "$authz" $listUri | jq --raw-output '.')"
          exists=$(echo $version_list | jq --arg t ${GITHUB_SHA::7} '.tags | index($t)')
          if [[ $exists == null ]]
          then
            make docker-login
            make docker-buildx-dev DEV_TAG=${GITHUB_SHA::7}
          fi
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"
    if: startsWith(github.ref, 'refs/tags/v') && github.repository == 'open-policy-agent/gatekeeper'
    needs: [lint, test, build_test, helm_build_test]
    timeout-minutes: 30
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get tag
        id: get_version
        run: |
          echo ::set-env name=TAG::${GITHUB_REF#refs/tags/}
          echo $TAG

      - name: Publish release
        run: |
          tokenUri="https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ env.IMAGE_REPO }}:pull"
          bearerToken="$(curl --silent --get $tokenUri | jq --raw-output '.token')"
          listUri="https://registry-1.docker.io/v2/${{ env.IMAGE_REPO }}/tags/list"
          authz="Authorization: Bearer $bearerToken"
          version_list="$(curl --silent --get -H "Accept: application/json" -H $authz $listUri | jq --raw-output '.')"
          exists=$(echo $version_list | jq --arg t ${TAG} '.tags | index($t)')
          if [[ $exists == null ]]
          then
            make docker-login
            make docker-buildx-release VERSION=${TAG}
          fi
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Bootstrap e2e
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          echo ::add-path::$GITHUB_WORKSPACE/bin
          make e2e-bootstrap

      - name: Verify release
        run: |
          make e2e-verify-release IMG=${{ env.IMAGE_REPO }}:${TAG} USE_LOCAL_IMG=false

      - name: Create GitHub release
        # using latest due to breaking change
        # TODO: pin to a tagged version when it's out
        # https://github.com/marvinpinto/actions/issues/39
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false

      - name: Publish Helm chart
        uses: stefanprodan/helm-gh-pages@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: charts
          target_dir: charts
          linting: off
